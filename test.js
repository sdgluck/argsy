const assert = require('./')

describe('argsy', () => {
  it('asserts ok good', () => expect(() => assert.ok(true, 'value')).not.toThrow())
  it('asserts ok bad', () => expect(() => assert.ok(false, 'value')).toThrowError(/expecting value to be ok/i))
  it('asserts ok, no name', () => expect(() => assert.ok(false)).toThrowError(/expecting ok/i))
  it('asserts notOk good', () => expect(() => assert.notOk(false)).not.toThrow())
  it('asserts notOk bad', () => expect(() => assert.notOk(true, 'value')).toThrowError(/expecting value to be not ok/i))
  it('asserts notOk, no name', () => expect(() => assert.notOk(true)).toThrowError(/expecting not ok/i))
  it('asserts str good', () => expect(() => assert.str('')).not.toThrow())
  it('asserts str bad', () => expect(() => assert.str(0, 'value')).toThrowError(/expecting value to be string/i))
  it('asserts str, no name', () => expect(() => assert.str(0)).toThrowError(/expecting string/i))
  it('asserts obj good', () => expect(() => assert.obj({})).not.toThrow())
  it('asserts obj bad', () => expect(() => assert.obj(0, 'value')).toThrowError(/expecting value to be object/i))
  it('asserts obj, no name', () => expect(() => assert.obj(0)).toThrowError(/expecting object/i))
  it('asserts nonEmptyStr good', () => expect(() => assert.nonEmptyStr(' ')).not.toThrow())
  it('asserts nonEmptyStr bad', () => expect(() => assert.nonEmptyStr('', 'value')).toThrowError(/expecting value to be non-empty string/i))
  it('asserts nonEmptyStr, no name', () => expect(() => assert.nonEmptyStr('')).toThrowError(/expecting non-empty string/i))
  it('asserts num good', () => expect(() => assert.num(0)).not.toThrow())
  it('asserts num bad', () => expect(() => assert.num('', 'value')).toThrowError(/expecting value to be number/i))
  it('asserts num, no name', () => expect(() => assert.num('')).toThrowError(/expecting number/i))
  it('asserts sym good', () => expect(() => assert.sym(Symbol())).not.toThrow())
  it('asserts sym bad', () => expect(() => assert.sym('', 'value')).toThrowError(/expecting value to be symbol/i))
  it('asserts sym, no name', () => expect(() => assert.sym('')).toThrowError(/expecting symbol/i))
  it('asserts int good', () => expect(() => assert.int(100)).not.toThrow())
  it('asserts int bad', () => expect(() => assert.int(1.5, 'value')).toThrowError(/expecting value to be integer/i))
  it('asserts int, no name', () => expect(() => assert.int(1.5)).toThrowError(/expecting integer/i))
  it('asserts bool good', () => expect(() => assert.bool(true)).not.toThrow())
  it('asserts bool bad', () => expect(() => assert.bool(1.5, 'value')).toThrowError(/expecting value to be boolean/i))
  it('asserts bool, no name', () => expect(() => assert.bool(1.5)).toThrowError(/expecting boolean/i))
  it('asserts undef good', () => expect(() => assert.undef(undefined)).not.toThrow())
  it('asserts undef bad', () => expect(() => assert.undef(1.5, 'value')).toThrowError(/expecting value to be undefined/i))
  it('asserts undef, no name', () => expect(() => assert.undef(1.5)).toThrowError(/expecting undefined/i))
  it('asserts null good', () => expect(() => assert.null(null)).not.toThrow())
  it('asserts null bad', () => expect(() => assert.null(1.5, 'value')).toThrowError(/expecting value to be null/i))
  it('asserts null, no name', () => expect(() => assert.null(1.5)).toThrowError(/expecting null/i))
})
